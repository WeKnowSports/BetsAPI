declare module "betting"
{
    import {ISelection} from "betting-selection";
    import {IBetInfo} from "betting-bet";
    import {IPurchase} from "betting-purchase";

    type BetingEvent = "any" | "purchaseUpdated" ;

    /** Information about the bet to be placed */
    type PlaceBetInformation = {
        /** bet id generated by server */
        betID : string,
        /** bet deposit in customer currency */
        deposit: number
    }

    /** Cashout operation result */
    type CashoutResult = {
        /** purchase for cashout */
        purchaseid : string;
        /** bet for cashout */
        betid: string;
        /** for partial cashout - new bet id */
        newBetId?: string;
        /** operation result */
        status: "accepted" | "declined"
    }

    /** Betslip API class */
    export interface IBetService
    {
        /** Places the bet
         * @param bets information about the selected bets and deposits
         * @returns purchase promise
         */
        placeBets(bets: PlaceBetInformation[]): Promise<IPurchase>;

        /** Accepts new offer for the purchase 
         * @param purchaseid id of the purchase
         * @returns purchase promise
        */
        acceptOffer(purchaseid: string): Promise<IPurchase>;

        /** Declines new offer for the purchase 
         * @param purchaseid id of the purchase
         * @returns purchase in declined state promise 
        */
        declineOffer(purchaseid: string): Promise<IPurchase>;

        /** Executes the cashout
         * @param purchaseid id of purhcase to cashout
         * @param betid id of bet inside the purchase
         * @param deposit ammount to cashout, null for full cashout
         * @returns promise for operation result
         */
        cashout(purchaseid: string, betid: string, deposit?: number) : Promise<CashoutResult>;


        /** Event subscription
         * @param event name of the event
         * @param callback event callback
         */
        on(event: BetingEvent, callback: (data: IPurchase) => void);

        /** Event unsubscription
         * @param event name of the event
         * @param callback event callback
         */
        off(event: BetingEvent, callback: (data: IPurchase) => void)
    }

}